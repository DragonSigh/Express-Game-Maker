//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EGMGame.DRMService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class SessionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIDField, value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SerialData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class SerialData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerValidatedSerialField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerValidatedSerial {
            get {
                return this.ServerValidatedSerialField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerValidatedSerialField, value) != true)) {
                    this.ServerValidatedSerialField = value;
                    this.RaisePropertyChanged("ServerValidatedSerial");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GUIDExistsData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class GUIDExistsData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangesRemainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GUIDExistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GUIDExistsElsewhereField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangesRemaining {
            get {
                return this.ChangesRemainingField;
            }
            set {
                if ((this.ChangesRemainingField.Equals(value) != true)) {
                    this.ChangesRemainingField = value;
                    this.RaisePropertyChanged("ChangesRemaining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GUIDExists {
            get {
                return this.GUIDExistsField;
            }
            set {
                if ((this.GUIDExistsField.Equals(value) != true)) {
                    this.GUIDExistsField = value;
                    this.RaisePropertyChanged("GUIDExists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GUIDExistsElsewhere {
            get {
                return this.GUIDExistsElsewhereField;
            }
            set {
                if ((this.GUIDExistsElsewhereField.Equals(value) != true)) {
                    this.GUIDExistsElsewhereField = value;
                    this.RaisePropertyChanged("GUIDExistsElsewhere");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GUIDData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class GUIDData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerValidatedGUIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerValidatedGUID {
            get {
                return this.ServerValidatedGUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerValidatedGUIDField, value) != true)) {
                    this.ServerValidatedGUIDField = value;
                    this.RaisePropertyChanged("ServerValidatedGUID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrialData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class TrialData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CurrentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrialLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TrialStartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentTime {
            get {
                return this.CurrentTimeField;
            }
            set {
                if ((this.CurrentTimeField.Equals(value) != true)) {
                    this.CurrentTimeField = value;
                    this.RaisePropertyChanged("CurrentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrialLength {
            get {
                return this.TrialLengthField;
            }
            set {
                if ((this.TrialLengthField.Equals(value) != true)) {
                    this.TrialLengthField = value;
                    this.RaisePropertyChanged("TrialLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TrialStartDate {
            get {
                return this.TrialStartDateField;
            }
            set {
                if ((this.TrialStartDateField.Equals(value) != true)) {
                    this.TrialStartDateField = value;
                    this.RaisePropertyChanged("TrialStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.expressgamemaker.com/Services/DRM", ConfigurationName="DRMService.IDRM", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDRM {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expressgamemaker.com/Services/DRM/IDRM/Login", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/LoginResponse")]
        EGMGame.DRMService.SessionData Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/Login", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        EGMGame.DRMService.SessionData EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateSerial", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateSerialResponse")]
        EGMGame.DRMService.SerialData ValidateSerial(string sessionID, string serial, int licenseType);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateSerial", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateSerialResponse")]
        System.IAsyncResult BeginValidateSerial(string sessionID, string serial, int licenseType, System.AsyncCallback callback, object asyncState);
        
        EGMGame.DRMService.SerialData EndValidateSerial(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/GUIDExists", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/GUIDExistsResponse")]
        EGMGame.DRMService.GUIDExistsData GUIDExists(string sessionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/GUIDExists", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/GUIDExistsResponse")]
        System.IAsyncResult BeginGUIDExists(string sessionID, string guid, System.AsyncCallback callback, object asyncState);
        
        EGMGame.DRMService.GUIDExistsData EndGUIDExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateGUID", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateGUIDResponse")]
        EGMGame.DRMService.GUIDData ValidateGUID(string sessionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateGUID", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/ValidateGUIDResponse")]
        System.IAsyncResult BeginValidateGUID(string sessionID, string guid, System.AsyncCallback callback, object asyncState);
        
        EGMGame.DRMService.GUIDData EndValidateGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/UpdateGUID")]
        void UpdateGUID(string sessionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/UpdateGUID")]
        System.IAsyncResult BeginUpdateGUID(string sessionID, string guid, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/TrialExists", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/TrialExistsResponse")]
        bool TrialExists(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/TrialExists", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/TrialExistsResponse")]
        System.IAsyncResult BeginTrialExists(string sessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndTrialExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/BeginTrial")]
        void BeginTrial(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/BeginTrial")]
        System.IAsyncResult BeginBeginTrial(string sessionID, System.AsyncCallback callback, object asyncState);
        
        void EndBeginTrial(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/GetTrialData", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/GetTrialDataResponse")]
        EGMGame.DRMService.TrialData GetTrialData(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/GetTrialData", ReplyAction="http://www.expressgamemaker.com/Services/DRM/IDRM/GetTrialDataResponse")]
        System.IAsyncResult BeginGetTrialData(string sessionID, System.AsyncCallback callback, object asyncState);
        
        EGMGame.DRMService.TrialData EndGetTrialData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/EndSession")]
        void EndSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://www.expressgamemaker.com/Services/DRM/IDRM/EndSession")]
        System.IAsyncResult BeginEndSession(System.AsyncCallback callback, object asyncState);
        
        void EndEndSession(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDRMChannel : EGMGame.DRMService.IDRM, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EGMGame.DRMService.SessionData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EGMGame.DRMService.SessionData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EGMGame.DRMService.SerialData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EGMGame.DRMService.SerialData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GUIDExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GUIDExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EGMGame.DRMService.GUIDExistsData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EGMGame.DRMService.GUIDExistsData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EGMGame.DRMService.GUIDData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EGMGame.DRMService.GUIDData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrialExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TrialExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrialDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrialDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EGMGame.DRMService.TrialData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EGMGame.DRMService.TrialData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DRMClient : System.ServiceModel.ClientBase<EGMGame.DRMService.IDRM>, EGMGame.DRMService.IDRM {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateSerialDelegate;
        
        private EndOperationDelegate onEndValidateSerialDelegate;
        
        private System.Threading.SendOrPostCallback onValidateSerialCompletedDelegate;
        
        private BeginOperationDelegate onBeginGUIDExistsDelegate;
        
        private EndOperationDelegate onEndGUIDExistsDelegate;
        
        private System.Threading.SendOrPostCallback onGUIDExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateGUIDDelegate;
        
        private EndOperationDelegate onEndValidateGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onValidateGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateGUIDDelegate;
        
        private EndOperationDelegate onEndUpdateGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginTrialExistsDelegate;
        
        private EndOperationDelegate onEndTrialExistsDelegate;
        
        private System.Threading.SendOrPostCallback onTrialExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginBeginTrialDelegate;
        
        private EndOperationDelegate onEndBeginTrialDelegate;
        
        private System.Threading.SendOrPostCallback onBeginTrialCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrialDataDelegate;
        
        private EndOperationDelegate onEndGetTrialDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrialDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndSessionDelegate;
        
        private EndOperationDelegate onEndEndSessionDelegate;
        
        private System.Threading.SendOrPostCallback onEndSessionCompletedDelegate;
        
        public DRMClient() {
        }
        
        public DRMClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DRMClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DRMClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DRMClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<ValidateSerialCompletedEventArgs> ValidateSerialCompleted;
        
        public event System.EventHandler<GUIDExistsCompletedEventArgs> GUIDExistsCompleted;
        
        public event System.EventHandler<ValidateGUIDCompletedEventArgs> ValidateGUIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateGUIDCompleted;
        
        public event System.EventHandler<TrialExistsCompletedEventArgs> TrialExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BeginTrialCompleted;
        
        public event System.EventHandler<GetTrialDataCompletedEventArgs> GetTrialDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EndSessionCompleted;
        
        public EGMGame.DRMService.SessionData Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EGMGame.DRMService.SessionData EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            EGMGame.DRMService.SessionData retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public EGMGame.DRMService.SerialData ValidateSerial(string sessionID, string serial, int licenseType) {
            return base.Channel.ValidateSerial(sessionID, serial, licenseType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateSerial(string sessionID, string serial, int licenseType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateSerial(sessionID, serial, licenseType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EGMGame.DRMService.SerialData EndValidateSerial(System.IAsyncResult result) {
            return base.Channel.EndValidateSerial(result);
        }
        
        private System.IAsyncResult OnBeginValidateSerial(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string serial = ((string)(inValues[1]));
            int licenseType = ((int)(inValues[2]));
            return this.BeginValidateSerial(sessionID, serial, licenseType, callback, asyncState);
        }
        
        private object[] OnEndValidateSerial(System.IAsyncResult result) {
            EGMGame.DRMService.SerialData retVal = this.EndValidateSerial(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateSerialCompleted(object state) {
            if ((this.ValidateSerialCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateSerialCompleted(this, new ValidateSerialCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateSerialAsync(string sessionID, string serial, int licenseType) {
            this.ValidateSerialAsync(sessionID, serial, licenseType, null);
        }
        
        public void ValidateSerialAsync(string sessionID, string serial, int licenseType, object userState) {
            if ((this.onBeginValidateSerialDelegate == null)) {
                this.onBeginValidateSerialDelegate = new BeginOperationDelegate(this.OnBeginValidateSerial);
            }
            if ((this.onEndValidateSerialDelegate == null)) {
                this.onEndValidateSerialDelegate = new EndOperationDelegate(this.OnEndValidateSerial);
            }
            if ((this.onValidateSerialCompletedDelegate == null)) {
                this.onValidateSerialCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateSerialCompleted);
            }
            base.InvokeAsync(this.onBeginValidateSerialDelegate, new object[] {
                        sessionID,
                        serial,
                        licenseType}, this.onEndValidateSerialDelegate, this.onValidateSerialCompletedDelegate, userState);
        }
        
        public EGMGame.DRMService.GUIDExistsData GUIDExists(string sessionID, string guid) {
            return base.Channel.GUIDExists(sessionID, guid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGUIDExists(string sessionID, string guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGUIDExists(sessionID, guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EGMGame.DRMService.GUIDExistsData EndGUIDExists(System.IAsyncResult result) {
            return base.Channel.EndGUIDExists(result);
        }
        
        private System.IAsyncResult OnBeginGUIDExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            return this.BeginGUIDExists(sessionID, guid, callback, asyncState);
        }
        
        private object[] OnEndGUIDExists(System.IAsyncResult result) {
            EGMGame.DRMService.GUIDExistsData retVal = this.EndGUIDExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGUIDExistsCompleted(object state) {
            if ((this.GUIDExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GUIDExistsCompleted(this, new GUIDExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GUIDExistsAsync(string sessionID, string guid) {
            this.GUIDExistsAsync(sessionID, guid, null);
        }
        
        public void GUIDExistsAsync(string sessionID, string guid, object userState) {
            if ((this.onBeginGUIDExistsDelegate == null)) {
                this.onBeginGUIDExistsDelegate = new BeginOperationDelegate(this.OnBeginGUIDExists);
            }
            if ((this.onEndGUIDExistsDelegate == null)) {
                this.onEndGUIDExistsDelegate = new EndOperationDelegate(this.OnEndGUIDExists);
            }
            if ((this.onGUIDExistsCompletedDelegate == null)) {
                this.onGUIDExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGUIDExistsCompleted);
            }
            base.InvokeAsync(this.onBeginGUIDExistsDelegate, new object[] {
                        sessionID,
                        guid}, this.onEndGUIDExistsDelegate, this.onGUIDExistsCompletedDelegate, userState);
        }
        
        public EGMGame.DRMService.GUIDData ValidateGUID(string sessionID, string guid) {
            return base.Channel.ValidateGUID(sessionID, guid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateGUID(string sessionID, string guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateGUID(sessionID, guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EGMGame.DRMService.GUIDData EndValidateGUID(System.IAsyncResult result) {
            return base.Channel.EndValidateGUID(result);
        }
        
        private System.IAsyncResult OnBeginValidateGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            return this.BeginValidateGUID(sessionID, guid, callback, asyncState);
        }
        
        private object[] OnEndValidateGUID(System.IAsyncResult result) {
            EGMGame.DRMService.GUIDData retVal = this.EndValidateGUID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateGUIDCompleted(object state) {
            if ((this.ValidateGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateGUIDCompleted(this, new ValidateGUIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateGUIDAsync(string sessionID, string guid) {
            this.ValidateGUIDAsync(sessionID, guid, null);
        }
        
        public void ValidateGUIDAsync(string sessionID, string guid, object userState) {
            if ((this.onBeginValidateGUIDDelegate == null)) {
                this.onBeginValidateGUIDDelegate = new BeginOperationDelegate(this.OnBeginValidateGUID);
            }
            if ((this.onEndValidateGUIDDelegate == null)) {
                this.onEndValidateGUIDDelegate = new EndOperationDelegate(this.OnEndValidateGUID);
            }
            if ((this.onValidateGUIDCompletedDelegate == null)) {
                this.onValidateGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginValidateGUIDDelegate, new object[] {
                        sessionID,
                        guid}, this.onEndValidateGUIDDelegate, this.onValidateGUIDCompletedDelegate, userState);
        }
        
        public void UpdateGUID(string sessionID, string guid) {
            base.Channel.UpdateGUID(sessionID, guid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateGUID(string sessionID, string guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateGUID(sessionID, guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateGUID(System.IAsyncResult result) {
            base.Channel.EndUpdateGUID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            return this.BeginUpdateGUID(sessionID, guid, callback, asyncState);
        }
        
        private object[] OnEndUpdateGUID(System.IAsyncResult result) {
            this.EndUpdateGUID(result);
            return null;
        }
        
        private void OnUpdateGUIDCompleted(object state) {
            if ((this.UpdateGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateGUIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateGUIDAsync(string sessionID, string guid) {
            this.UpdateGUIDAsync(sessionID, guid, null);
        }
        
        public void UpdateGUIDAsync(string sessionID, string guid, object userState) {
            if ((this.onBeginUpdateGUIDDelegate == null)) {
                this.onBeginUpdateGUIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateGUID);
            }
            if ((this.onEndUpdateGUIDDelegate == null)) {
                this.onEndUpdateGUIDDelegate = new EndOperationDelegate(this.OnEndUpdateGUID);
            }
            if ((this.onUpdateGUIDCompletedDelegate == null)) {
                this.onUpdateGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateGUIDDelegate, new object[] {
                        sessionID,
                        guid}, this.onEndUpdateGUIDDelegate, this.onUpdateGUIDCompletedDelegate, userState);
        }
        
        public bool TrialExists(string sessionID) {
            return base.Channel.TrialExists(sessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTrialExists(string sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTrialExists(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTrialExists(System.IAsyncResult result) {
            return base.Channel.EndTrialExists(result);
        }
        
        private System.IAsyncResult OnBeginTrialExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BeginTrialExists(sessionID, callback, asyncState);
        }
        
        private object[] OnEndTrialExists(System.IAsyncResult result) {
            bool retVal = this.EndTrialExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTrialExistsCompleted(object state) {
            if ((this.TrialExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TrialExistsCompleted(this, new TrialExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TrialExistsAsync(string sessionID) {
            this.TrialExistsAsync(sessionID, null);
        }
        
        public void TrialExistsAsync(string sessionID, object userState) {
            if ((this.onBeginTrialExistsDelegate == null)) {
                this.onBeginTrialExistsDelegate = new BeginOperationDelegate(this.OnBeginTrialExists);
            }
            if ((this.onEndTrialExistsDelegate == null)) {
                this.onEndTrialExistsDelegate = new EndOperationDelegate(this.OnEndTrialExists);
            }
            if ((this.onTrialExistsCompletedDelegate == null)) {
                this.onTrialExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTrialExistsCompleted);
            }
            base.InvokeAsync(this.onBeginTrialExistsDelegate, new object[] {
                        sessionID}, this.onEndTrialExistsDelegate, this.onTrialExistsCompletedDelegate, userState);
        }
        
        public void BeginTrial(string sessionID) {
            base.Channel.BeginTrial(sessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBeginTrial(string sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeginTrial(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndBeginTrial(System.IAsyncResult result) {
            base.Channel.EndBeginTrial(result);
        }
        
        private System.IAsyncResult OnBeginBeginTrial(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BeginBeginTrial(sessionID, callback, asyncState);
        }
        
        private object[] OnEndBeginTrial(System.IAsyncResult result) {
            this.EndBeginTrial(result);
            return null;
        }
        
        private void OnBeginTrialCompleted(object state) {
            if ((this.BeginTrialCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeginTrialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BeginTrialAsync(string sessionID) {
            this.BeginTrialAsync(sessionID, null);
        }
        
        public void BeginTrialAsync(string sessionID, object userState) {
            if ((this.onBeginBeginTrialDelegate == null)) {
                this.onBeginBeginTrialDelegate = new BeginOperationDelegate(this.OnBeginBeginTrial);
            }
            if ((this.onEndBeginTrialDelegate == null)) {
                this.onEndBeginTrialDelegate = new EndOperationDelegate(this.OnEndBeginTrial);
            }
            if ((this.onBeginTrialCompletedDelegate == null)) {
                this.onBeginTrialCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeginTrialCompleted);
            }
            base.InvokeAsync(this.onBeginBeginTrialDelegate, new object[] {
                        sessionID}, this.onEndBeginTrialDelegate, this.onBeginTrialCompletedDelegate, userState);
        }
        
        public EGMGame.DRMService.TrialData GetTrialData(string sessionID) {
            return base.Channel.GetTrialData(sessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrialData(string sessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrialData(sessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EGMGame.DRMService.TrialData EndGetTrialData(System.IAsyncResult result) {
            return base.Channel.EndGetTrialData(result);
        }
        
        private System.IAsyncResult OnBeginGetTrialData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BeginGetTrialData(sessionID, callback, asyncState);
        }
        
        private object[] OnEndGetTrialData(System.IAsyncResult result) {
            EGMGame.DRMService.TrialData retVal = this.EndGetTrialData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrialDataCompleted(object state) {
            if ((this.GetTrialDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrialDataCompleted(this, new GetTrialDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrialDataAsync(string sessionID) {
            this.GetTrialDataAsync(sessionID, null);
        }
        
        public void GetTrialDataAsync(string sessionID, object userState) {
            if ((this.onBeginGetTrialDataDelegate == null)) {
                this.onBeginGetTrialDataDelegate = new BeginOperationDelegate(this.OnBeginGetTrialData);
            }
            if ((this.onEndGetTrialDataDelegate == null)) {
                this.onEndGetTrialDataDelegate = new EndOperationDelegate(this.OnEndGetTrialData);
            }
            if ((this.onGetTrialDataCompletedDelegate == null)) {
                this.onGetTrialDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrialDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrialDataDelegate, new object[] {
                        sessionID}, this.onEndGetTrialDataDelegate, this.onGetTrialDataCompletedDelegate, userState);
        }
        
        public void EndSession() {
            base.Channel.EndSession();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEndSession(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEndSession(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEndSession(System.IAsyncResult result) {
            base.Channel.EndEndSession(result);
        }
        
        private System.IAsyncResult OnBeginEndSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginEndSession(callback, asyncState);
        }
        
        private object[] OnEndEndSession(System.IAsyncResult result) {
            this.EndEndSession(result);
            return null;
        }
        
        private void OnEndSessionCompleted(object state) {
            if ((this.EndSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndSessionAsync() {
            this.EndSessionAsync(null);
        }
        
        public void EndSessionAsync(object userState) {
            if ((this.onBeginEndSessionDelegate == null)) {
                this.onBeginEndSessionDelegate = new BeginOperationDelegate(this.OnBeginEndSession);
            }
            if ((this.onEndEndSessionDelegate == null)) {
                this.onEndEndSessionDelegate = new EndOperationDelegate(this.OnEndEndSession);
            }
            if ((this.onEndSessionCompletedDelegate == null)) {
                this.onEndSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndSessionCompleted);
            }
            base.InvokeAsync(this.onBeginEndSessionDelegate, null, this.onEndEndSessionDelegate, this.onEndSessionCompletedDelegate, userState);
        }
    }
}
